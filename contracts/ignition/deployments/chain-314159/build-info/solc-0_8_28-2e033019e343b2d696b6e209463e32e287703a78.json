{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-2e033019e343b2d696b6e209463e32e287703a78",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/CreatorTokenFactory.sol": "project/contracts/CreatorTokenFactory.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@4.9.6/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/security/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/utils/math/SafeMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
      },
      "project/contracts/CreatorTokenFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"./ICreatorMetricsManager.sol\";\r\nimport \"./ITokenDeploymentFactory.sol\";\r\nimport \"./IBalancedCreatorToken.sol\";\r\n\r\n/**\r\n * @title CreatorTokenFactory\r\n * @dev Creates and manages creator tokens with balanced tokenomics\r\n * Now uses a separate deployment factory to keep contract size manageable\r\n */\r\ncontract CreatorTokenFactory is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    struct CreatorCoin {\r\n        address coinAddress;\r\n        address creator;\r\n        uint256 createdAt;\r\n        uint256 totalSupply;\r\n        uint256 circulatingSupply;\r\n        uint256 reserveRatio; // Percentage backed by revenue\r\n        uint256 intrinsicValue; // Calculated from real metrics\r\n        bool hasRevenueBacking;\r\n        uint256 liquidityLockUntil; // Prevents rugpulls\r\n    }\r\n    \r\n    // Platform configuration\r\n    uint256 public constant PLATFORM_FEE = 250; // 2.5%\r\n    uint256 public constant MIN_LIQUIDITY_LOCK = 365 days;\r\n    \r\n    // External contracts\r\n    ICreatorMetricsManager public metricsManager;\r\n    ITokenDeploymentFactory public tokenDeploymentFactory;\r\n    \r\n    mapping(address => CreatorCoin) public creatorCoins;\r\n    address[] public allCreatorCoins;\r\n    \r\n    event CreatorCoinLaunched(\r\n        address indexed creator,\r\n        address indexed coinAddress,\r\n        uint256 intrinsicValue,\r\n        uint256 reserveRatio\r\n    );\r\n    \r\n    event RevenueDistributed(\r\n        address indexed creator,\r\n        uint256 amount,\r\n        uint256 perTokenAmount\r\n    );\r\n    \r\n    constructor(\r\n        address _metricsManager,\r\n        address _tokenDeploymentFactory\r\n    ) Ownable() {\r\n        metricsManager = ICreatorMetricsManager(_metricsManager);\r\n        tokenDeploymentFactory = ITokenDeploymentFactory(_tokenDeploymentFactory);\r\n    }\r\n    \r\n    modifier validCreator(address creator) {\r\n        require(creatorCoins[creator].coinAddress != address(0), \"Creator not found\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Launch creator coin only when metrics justify it\r\n     * Now uses external deployment factory to keep this contract smaller\r\n     */\r\n    function launchCreatorCoin(\r\n        address creator,\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 initialSupply\r\n    ) external onlyOwner returns (address) {\r\n        require(creatorCoins[creator].coinAddress == address(0), \"Coin already exists\");\r\n        require(metricsManager.meetsLaunchRequirements(creator), \"Insufficient metrics\");\r\n        \r\n        // Calculate intrinsic value based on real metrics\r\n        uint256 intrinsicValue = metricsManager.calculateIntrinsicValue(creator);\r\n        require(intrinsicValue > 0, \"Insufficient value metrics\");\r\n        \r\n        // Deploy new creator coin using deployment factory\r\n        address tokenAddress = tokenDeploymentFactory.deployToken(\r\n            creator,\r\n            name,\r\n            symbol,\r\n            address(this), // This contract manages the token\r\n            initialSupply\r\n        );\r\n        \r\n        // Get creator metrics for reserve ratio calculation\r\n        (,, uint256 monthlyRevenue,,,) = metricsManager.creatorMetrics(creator);\r\n        \r\n        // Set up coin data\r\n        creatorCoins[creator] = CreatorCoin({\r\n            coinAddress: tokenAddress,\r\n            creator: creator,\r\n            createdAt: block.timestamp,\r\n            totalSupply: initialSupply,\r\n            circulatingSupply: initialSupply.div(4), // Only 25% initially circulating\r\n            reserveRatio: monthlyRevenue > 0 ? 2000 : 1000, // 20% or 10% reserve\r\n            intrinsicValue: intrinsicValue,\r\n            hasRevenueBacking: monthlyRevenue >= 1 ether, // 1 FIL minimum\r\n            liquidityLockUntil: block.timestamp + MIN_LIQUIDITY_LOCK\r\n        });\r\n        \r\n        allCreatorCoins.push(tokenAddress);\r\n        \r\n        emit CreatorCoinLaunched(creator, tokenAddress, intrinsicValue, creatorCoins[creator].reserveRatio);\r\n        return tokenAddress;\r\n    }\r\n    \r\n    /**\r\n     * @dev Distribute creator revenue to token holders (monthly)\r\n     */\r\n    function distributeRevenue(address creator) external payable nonReentrant validCreator(creator) {\r\n        require(msg.sender == creator, \"Only creator can distribute\");\r\n        require(msg.value > 0, \"No revenue to distribute\");\r\n        \r\n        CreatorCoin storage coin = creatorCoins[creator];\r\n        require(coin.hasRevenueBacking, \"Revenue backing not enabled\");\r\n        \r\n        // Platform takes small fee\r\n        uint256 platformFee = msg.value.mul(PLATFORM_FEE).div(10000);\r\n        uint256 distributionAmount = msg.value.sub(platformFee);\r\n        \r\n        // Calculate per-token distribution\r\n        uint256 perTokenAmount = distributionAmount.div(coin.circulatingSupply);\r\n        \r\n        // Update coin with revenue backing\r\n        IBalancedCreatorToken(coin.coinAddress).distributeRevenue{value: distributionAmount}(perTokenAmount);\r\n        \r\n        emit RevenueDistributed(creator, distributionAmount, perTokenAmount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Release more tokens as creator grows (prevents initial pump)\r\n     */\r\n    function releaseMoreTokens(address creator, uint256 amount) external onlyOwner validCreator(creator) {\r\n        CreatorCoin storage coin = creatorCoins[creator];\r\n        \r\n        // Only release based on growth milestones\r\n        uint256 maxRelease = coin.totalSupply.sub(coin.circulatingSupply).div(4); // Max 25% at once\r\n        require(amount <= maxRelease, \"Release amount too large\");\r\n        \r\n        // Require growth to justify release\r\n        uint256 currentValue = metricsManager.calculateIntrinsicValue(creator);\r\n        uint256 lastValue = coin.intrinsicValue;\r\n        require(currentValue >= lastValue.mul(120).div(100), \"Insufficient growth for release\");\r\n        \r\n        coin.circulatingSupply = coin.circulatingSupply.add(amount);\r\n        coin.intrinsicValue = currentValue;\r\n        IBalancedCreatorToken(coin.coinAddress).mint(creator, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Emergency functions for market manipulation\r\n     */\r\n    function pauseTrading(address creator) external onlyOwner validCreator(creator) {\r\n        IBalancedCreatorToken(creatorCoins[creator].coinAddress).pauseTrading();\r\n    }\r\n    \r\n    function unpauseTrading(address creator) external onlyOwner validCreator(creator) {\r\n        IBalancedCreatorToken(creatorCoins[creator].coinAddress).unpauseTrading();\r\n    }\r\n    \r\n    /**\r\n     * @dev View functions\r\n     */\r\n    function getCreatorCoinInfo(address creator) external view returns (\r\n        address coinAddress,\r\n        uint256 intrinsicValue,\r\n        uint256 circulatingSupply,\r\n        uint256 reserveRatio,\r\n        bool hasRevenueBacking\r\n    ) {\r\n        CreatorCoin memory coin = creatorCoins[creator];\r\n        return (\r\n            coin.coinAddress,\r\n            coin.intrinsicValue,\r\n            coin.circulatingSupply,\r\n            coin.reserveRatio,\r\n            coin.hasRevenueBacking\r\n        );\r\n    }\r\n    \r\n    function getAllCreatorCoins() external view returns (address[] memory) {\r\n        return allCreatorCoins;\r\n    }\r\n    \r\n    /**\r\n     * @dev Update external contract addresses\r\n     */\r\n    function setMetricsManager(address _metricsManager) external onlyOwner {\r\n        metricsManager = ICreatorMetricsManager(_metricsManager);\r\n    }\r\n    \r\n    function setTokenDeploymentFactory(address _tokenDeploymentFactory) external onlyOwner {\r\n        tokenDeploymentFactory = ITokenDeploymentFactory(_tokenDeploymentFactory);\r\n    }\r\n}"
      },
      "project/contracts/IBalancedCreatorToken.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @title IBalancedCreatorToken\r\n * @dev Interface for BalancedCreatorToken to enable loose coupling\r\n */\r\ninterface IBalancedCreatorToken {\r\n    // ERC20 functions\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    \r\n    // Creator token specific functions\r\n    function creator() external view returns (address);\r\n    function tradingPaused() external view returns (bool);\r\n    function platformContract() external view returns (address);\r\n    \r\n    // Revenue functions\r\n    function distributeRevenue(uint256 perTokenAmount) external payable;\r\n    function claimRevenue() external;\r\n    function pendingRevenue(address holder) external view returns (uint256);\r\n    \r\n    // Platform management\r\n    function mint(address to, uint256 amount) external;\r\n    function pauseTrading() external;\r\n    function unpauseTrading() external;\r\n    \r\n    // Anti-manipulation tracking\r\n    function lastTradeTime(address user) external view returns (uint256);\r\n    function dailyTradeVolume(address user) external view returns (uint256);\r\n    function dailyVolumeResetTime(address user) external view returns (uint256);\r\n}"
      },
      "project/contracts/ICreatorMetricsManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @title ICreatorMetricsManager\r\n * @dev Interface for CreatorMetricsManager to enable loose coupling\r\n */\r\ninterface ICreatorMetricsManager {\r\n    struct CreatorMetrics {\r\n        uint256 monthlyStreams;\r\n        uint256 followers;\r\n        uint256 monthlyRevenue;\r\n        uint256 engagementScore;\r\n        uint256 lastUpdated;\r\n        uint256 verificationLevel; // 0-4 (unverified to platinum)\r\n    }\r\n    \r\n    // View functions\r\n    function creatorMetrics(address creator) external view returns (\r\n        uint256 monthlyStreams,\r\n        uint256 followers,\r\n        uint256 monthlyRevenue,\r\n        uint256 engagementScore,\r\n        uint256 lastUpdated,\r\n        uint256 verificationLevel\r\n    );\r\n    \r\n    function calculateIntrinsicValue(address creator) external view returns (uint256);\r\n    \r\n    function calculateVerificationLevel(address creator) external view returns (uint256);\r\n    \r\n    function meetsLaunchRequirements(address creator) external view returns (bool);\r\n    \r\n    // Management functions\r\n    function updateCreatorMetrics(\r\n        address creator,\r\n        uint256 monthlyStreams,\r\n        uint256 followers,\r\n        uint256 monthlyRevenue,\r\n        uint256 engagementScore\r\n    ) external;\r\n    \r\n    function addAuthorizedOracle(address oracle) external;\r\n    \r\n    function removeAuthorizedOracle(address oracle) external;\r\n    \r\n    // Events\r\n    event MetricsUpdated(\r\n        address indexed creator,\r\n        uint256 streams,\r\n        uint256 followers,\r\n        uint256 revenue,\r\n        uint256 newIntrinsicValue\r\n    );\r\n}"
      },
      "project/contracts/ITokenDeploymentFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @title ITokenDeploymentFactory\r\n * @dev Interface for TokenDeploymentFactory to enable loose coupling\r\n */\r\ninterface ITokenDeploymentFactory {\r\n    \r\n    /**\r\n     * @dev Deploy a new BalancedCreatorToken\r\n     * @param creator The creator address\r\n     * @param name Token name\r\n     * @param symbol Token symbol  \r\n     * @param platformContract Address of the platform contract that will manage this token\r\n     * @param initialSupply Initial token supply\r\n     * @return tokenAddress Address of the deployed token\r\n     */\r\n    function deployToken(\r\n        address creator,\r\n        string memory name,\r\n        string memory symbol,\r\n        address platformContract,\r\n        uint256 initialSupply\r\n    ) external returns (address tokenAddress);\r\n    \r\n    /**\r\n     * @dev Get all tokens deployed for a creator\r\n     */\r\n    function getCreatorTokens(address creator) external view returns (address[] memory);\r\n    \r\n    /**\r\n     * @dev Get all deployed tokens\r\n     */\r\n    function getAllTokens() external view returns (address[] memory);\r\n    \r\n    /**\r\n     * @dev Get total number of deployed tokens\r\n     */\r\n    function getTotalTokensDeployed() external view returns (uint256);\r\n    \r\n    // Events\r\n    event TokenDeployed(\r\n        address indexed creator,\r\n        address indexed tokenAddress,\r\n        string name,\r\n        string symbol,\r\n        uint256 initialSupply,\r\n        address platformContract\r\n    );\r\n}"
      }
    }
  }
}