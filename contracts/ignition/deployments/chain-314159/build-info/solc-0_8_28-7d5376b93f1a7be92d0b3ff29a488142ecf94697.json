{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-7d5376b93f1a7be92d0b3ff29a488142ecf94697",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/CreatorMetricsManager.sol": "project/contracts/CreatorMetricsManager.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@4.9.6/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/utils/math/SafeMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
      },
      "project/contracts/CreatorMetricsManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\n/**\r\n * @title CreatorMetricsManager\r\n * @dev Manages creator metrics and intrinsic value calculations\r\n */\r\ncontract CreatorMetricsManager is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    struct CreatorMetrics {\r\n        uint256 monthlyStreams;\r\n        uint256 followers;\r\n        uint256 monthlyRevenue;\r\n        uint256 engagementScore;\r\n        uint256 lastUpdated;\r\n        uint256 verificationLevel; // 0-4 (unverified to platinum)\r\n    }\r\n    \r\n    mapping(address => CreatorMetrics) public creatorMetrics;\r\n    mapping(address => bool) public authorizedOracles;\r\n    \r\n    event MetricsUpdated(\r\n        address indexed creator,\r\n        uint256 streams,\r\n        uint256 followers,\r\n        uint256 revenue,\r\n        uint256 newIntrinsicValue\r\n    );\r\n    \r\n    modifier onlyAuthorizedOracle() {\r\n        require(authorizedOracles[msg.sender], \"Not authorized oracle\");\r\n        _;\r\n    }\r\n\r\n    constructor() Ownable(){\r\n        \r\n    } \r\n    \r\n    // Update creator metrics (called by backend oracles)\r\n    function updateCreatorMetrics(\r\n        address creator,\r\n        uint256 monthlyStreams,\r\n        uint256 followers,\r\n        uint256 monthlyRevenue,\r\n        uint256 engagementScore\r\n    ) external onlyAuthorizedOracle {\r\n        \r\n        CreatorMetrics storage metrics = creatorMetrics[creator];\r\n        \r\n        // Require reasonable growth (prevents fake metrics)\r\n        // For testing, we'll skip timing constraints but still check for unrealistic growth\r\n        if (metrics.lastUpdated > 0) {\r\n            // Anti-manipulation: prevent unrealistic growth \r\n            if (monthlyStreams > 0 && metrics.monthlyStreams > 0) {\r\n                uint256 maxGrowth = metrics.monthlyStreams.mul(5); // 5x growth max per update\r\n                require(monthlyStreams <= maxGrowth, \"Unrealistic growth\");\r\n            }\r\n        }\r\n        \r\n        metrics.monthlyStreams = monthlyStreams;\r\n        metrics.followers = followers;\r\n        metrics.monthlyRevenue = monthlyRevenue;\r\n        metrics.engagementScore = engagementScore;\r\n        metrics.lastUpdated = block.timestamp;\r\n        \r\n        // Update verification level based on metrics\r\n        metrics.verificationLevel = calculateVerificationLevel(creator);\r\n        \r\n        // Emit event with new intrinsic value\r\n        uint256 newIntrinsicValue = calculateIntrinsicValue(creator);\r\n        emit MetricsUpdated(creator, monthlyStreams, followers, monthlyRevenue, newIntrinsicValue);\r\n    }\r\n    \r\n    // Calculate intrinsic value based on real music success metrics\r\n    function calculateIntrinsicValue(address creator) public view returns (uint256) {\r\n        CreatorMetrics memory metrics = creatorMetrics[creator];\r\n        \r\n        if (metrics.monthlyStreams == 0) return 0;\r\n        \r\n        // Base value from streaming (streams * $0.003 per stream annually)\r\n        uint256 streamValue = metrics.monthlyStreams.mul(12).mul(3e15); // 0.003 FIL per stream\r\n        \r\n        // Follower multiplier (more followers = higher growth potential)\r\n        uint256 followerMultiplier = 1000 + (metrics.followers.div(100)); // 1.0x + 0.01x per 100 followers\r\n        streamValue = streamValue.mul(followerMultiplier).div(1000);\r\n        \r\n        // Revenue multiplier (proven monetization)\r\n        if (metrics.monthlyRevenue > 0) {\r\n            uint256 annualRevenue = metrics.monthlyRevenue.mul(12);\r\n            uint256 revenueValue = annualRevenue.mul(3); // 3x revenue multiple\r\n            streamValue = streamValue.add(revenueValue);\r\n        }\r\n        \r\n        // Engagement bonus (active community = sustainable growth)\r\n        uint256 engagementBonus = streamValue.mul(metrics.engagementScore).div(100);\r\n        streamValue = streamValue.add(engagementBonus);\r\n        \r\n        // Verification level bonus\r\n        uint256 verificationBonus = streamValue.mul(metrics.verificationLevel.mul(10)).div(100);\r\n        streamValue = streamValue.add(verificationBonus);\r\n        \r\n        return streamValue;\r\n    }\r\n    \r\n    // Calculate verification level (0-4) based on metrics\r\n    function calculateVerificationLevel(address creator) public view returns (uint256) {\r\n        CreatorMetrics memory metrics = creatorMetrics[creator];\r\n        \r\n        if (metrics.followers >= 1000000 && metrics.monthlyStreams >= 10000000) {\r\n            return 4; // Platinum\r\n        } else if (metrics.followers >= 500000 && metrics.monthlyStreams >= 5000000) {\r\n            return 3; // Gold\r\n        } else if (metrics.followers >= 100000 && metrics.monthlyStreams >= 1000000) {\r\n            return 2; // Silver\r\n        } else if (metrics.followers >= 25000 && metrics.monthlyStreams >= 250000) {\r\n            return 1; // Bronze\r\n        }\r\n        return 0; // Unverified\r\n    }\r\n    \r\n    // Check if creator meets launch requirements\r\n    function meetsLaunchRequirements(address creator) external view returns (bool) {\r\n        CreatorMetrics memory metrics = creatorMetrics[creator];\r\n        return metrics.monthlyStreams >= 50000 && metrics.followers >= 5000;\r\n    }\r\n    \r\n    // Oracle management\r\n    function addAuthorizedOracle(address oracle) external onlyOwner {\r\n        authorizedOracles[oracle] = true;\r\n    }\r\n    \r\n    function removeAuthorizedOracle(address oracle) external onlyOwner {\r\n        authorizedOracles[oracle] = false;\r\n    }\r\n}"
      }
    }
  }
}